// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Split the instruction bits
    And16(
        a=instruction, b=instruction,
        out[15]=iBit,
        out[12]=aBit,
        out[11]=zxBit,
        out[10]=nxBit,
        out[9]=zyBit,
        out[8]=nyBit,
        out[7]=fBit,
        out[6]=noBit,
        out[5]=dstABit,
        out[4]=dstDBit,
        out[3]=dstMBit,
        out[2]=jmpLTBit,
        out[1]=jmpEQBit,
        out[0]=jmpGTBit
        );

    // Select A Register 
    Mux16(a=instruction, b=aluOut, sel=iBit, out=aInput);
    Not(in=iBit, out=isAInstruction);
    Or(a=isAInstruction, b=dstABit, out=loadA);

    // A register
    Register(in=aInput, load=loadA, out=aRegister);

    // D register
    And(a=dstDBit, b=iBit, out=loadD);
    Register(in=aluOut, load=loadD, out=dRegister);

    // Select ALU Y input
    Mux16(a=aRegister, b=inM, sel=aBit, out=aluY);

    ALU(
        x=dRegister,
        y=aluY,
        zx=zxBit,
        nx=nxBit,
        zy=zyBit,
        ny=nyBit,
        f=fBit,
        no=noBit,
        zr=aluZr,
        ng=aluNg,
        out=aluOut
        );

    // Write to M
    And(a=dstMBit, b=iBit, out=writeM);
    And16(a=aluOut, b=aluOut, out=outM);
    And16(a=aRegister, b=aRegister, out[0..14]=addressM);

    // Jump
    And(a=jmpLTBit, b=aluNg, out=shouldJmpLT);
    And(a=jmpEQBit, b=aluZr, out=shouldJmpEQ);
    Not(in=aluNg, out=aluPs);
    Not(in=aluZr, out=aluNotZr);
    And(a=aluPs, b=aluNotZr, out=aluGT);
    And(a=jmpGTBit, b=aluGT, out=shouldJmpGT);
    Or(a=shouldJmpLT, b=shouldJmpGT, out=shouldJmpLTGT);
    Or(a=shouldJmpLTGT, b=shouldJmpEQ, out=shouldJumpLTGTEQ);
    And(a=shouldJumpLTGTEQ, b=iBit, out=shouldJump);

    // PC
    PC(in=aRegister, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);
}